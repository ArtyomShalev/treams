import pytest
import numpy as np

import ptsa.coeffs as cf

EPS = 2e-7
EPSSQ = 4e-14



class TestMie:
    def test_real(self):
        expect = np.array([
            [-0.207488775205865 - 0.398855023857451j, 0.047334571416857 + 0.044794841521540j],
            [0.059646659631622 + 0.056446326342700j, -0.117865783454384 - 0.314040741356843j],
        ])
        assert np.sum(np.abs(cf.mie(1, [1, 2, 4], [1, 1.3, 3, 2], [1, 2, 1, 1.5], [.1, 0, .2, .1]) - expect)) < EPSSQ
    def test_complex(self):
        expect = np.array([
            [-0.233064414843298 + 0.218720052849983j, 0.047852376140501 + 0.048918498716278j],
            [0.084573700327288 + 0.086457952239276j, -0.619693739232935 + 0.081746714390217j],
        ])
        assert np.sum(np.abs(cf.mie(3, [1, 2, 3], [1, 2, 3 + 1j, 4], [4, 3 + .1j, 1, 2], [.3, -.1 + .1j, 1 + .1j, .4]) - expect)) < EPSSQ


class TestFresnel:
    def test_real(self):
        expect = [
            [
                [
                    [1.042449234640745, 0],
                    [0, 1.005929062176551],
                ],
                [
                    [-0.042449234640745, 0],
                    [0, -0.005929062176551],
                ],
            ],
            [
                [
                    [0.042449234640745, 0],
                    [0, 0.005929062176551],
                ],
                [
                    [0.957550765359255, 0],
                    [0, 0.994070937823449],
                ],
            ],
        ]
        assert np.sum(np.abs(cf.fresnel(
            [[3, 5], [2, 4]],
            [[np.sqrt(8), np.sqrt(24)], [np.sqrt(3), np.sqrt(15)]],
            [1, 1],
        ) - expect)) < EPSSQ
    def test_evanescent(self):
        expect = [
            [
                [
                    [1.6, 0],
                    [0.3525 + 0.892941067484299j, 1.0125 - 1.488235112473832j],
                ],
                [
                    [0, -0.6],
                    [-0.6, 0.235 + 0.595294044989533j],
                ],
            ],
            [
                [
                    [0.1321875 + 0.334852900306612j, 0.3796875 - 0.558088167177687j],
                    [0.8203125 + 0.558088167177687j, -0.3671875 - 0.930146945296145j],
                ],
                [
                    [0.4, 0.088125 + 0.223235266871075j],
                    [0, 0.546875 + 0.372058778118458j],
                ],
            ],
        ]
        assert np.sum(np.abs(cf.fresnel(
            [[3, 5], [3, 3]],
            [[1j * np.sqrt(7), 3], [1j * np.sqrt(7), 1j * np.sqrt(7)]],
            [1 / 4, 1],
        ) - expect)) < EPSSQ
    def test_complex(self):
        expect = [
            [
                [
                    [1.097225776644201 + 0.417220660903015j, 0.091009961428571 - 0.126135520878490j],
                    [0.001231951759500 - 0.002873123884810j, 1.344486739106106 + 0.035486557500712j],
                ],
                [
                    [0.150107671767365 - 0.265167179806910j, -0.338343409840136 - 0.025917960217615j],
                    [-0.341187323894434 - 0.025964969567879j, -0.004531366971172 - 0.006648464048023j],
                ],
            ],
            [
                [
                    [-0.174619475651097 + 0.295135397879729j, 0.406453529679773 - 0.067329209352982j],
                    [0.273077204054797 + 0.119212139138476j, 0.029043170854903 - 0.023319754024796j],
                ],
                [
                    [0.768675971525422 - 0.225752788034603j, -0.000510025554099 - 0.002053400492144j],
                    [0.040244376347509 - 0.065379361340185j, 0.657635248742791 - 0.030513023773495j],
                ],
            ],
        ]
        epsilon = np.array([4 + 1j, 3 + .1j])
        mu = np.array([1 + .1j, 3 + .01j])
        kappa = np.array([1 + .1j, -.1])
        ks = np.dstack((np.sqrt(epsilon * mu) - kappa, np.sqrt(epsilon * mu) + kappa))
        kzs = np.sqrt(ks * ks - 1)
        zs = np.sqrt(mu / epsilon)
        assert np.sum(np.abs(cf.fresnel(ks, kzs, zs) - expect)) < EPSSQ


class TestMieCyl:
    def test_real(self):
        assert 0
    def test_evanescent(self):
        assert 0
    def test_complex(self):
        assert 0
